import pygame, random, math

ANCHOPANTALLA = 832
ALTOPANTALLA = 512
vel_disparo = 6
player_speed = 5
player_hp = 20
player_run_mult = 2
enemy_speed = 2
daño_bala = 5
enemigo_melee = {"type": "melee", "hp" : 10, "dmg" : 10, "range" : 20, "atck_speed" : 1000, "png" : "GIT/idle_abajo.png"}
enemigo_range = {"type": "range", "hp" : 10, "dmg" : 10, "range" : 200, "atck_speed" : 1000, "png" : "GIT/idle_abajo.png"}
nivel_1_coords = ((ANCHOPANTALLA//2, 0), (ANCHOPANTALLA//2, ALTOPANTALLA), (0, ALTOPANTALLA//2), (ANCHOPANTALLA, ALTOPANTALLA//2))
probabilidades_drop = [True] * 1 + [False] * 1

#Funcion Escalar imagen a una escala float como porcentaje
def escalar_img(image, scale:float):
    w = image.get_width()
    h = image.get_height()
    return pygame.transform.rotozoom(image,0 ,(w * scale, h * scale))

def generar_nivel(cant_enemigos_por_ronda, max_enemigos, coords_spawn, spawn_time):
    #cant_enemigos_por_ronda: Cantidad de enemigos por ronda (min, max)
    #max_enemigos: cantidad enemigos total
    #coords_spawn: Tupla con tuplas de coords, ej: ((izq), (arr), (der), (abajo)) siendo cada parte otra tupla con coordenadas de cada parte
    #spawn_time: cada cuanto spawnea cada ronda
    coords_spawn_temp = list(coords_spawn)
    lista_return = []
    ronda = 1
    while max_enemigos > 0:
        cant_enemigos_por_ronda_temp = random.randint(cant_enemigos_por_ronda[0], cant_enemigos_por_ronda[1])
        for i in range(cant_enemigos_por_ronda_temp):
            spawn_time_temp = spawn_time * ronda
            if not coords_spawn_temp:
                coords_spawn_temp = list(coords_spawn)
                spawn_time_temp += 500
            if coords_spawn_temp:
                coords_temp = coords_spawn_temp[random.randint(0, len(coords_spawn_temp) - 1)]
                ene_temp = Enemigo(enemigo_range)
                max_enemigos -= 1
                ene_temp.rect.center = coords_temp
                coords_spawn_temp.remove(coords_temp)
                ene_temp.tiempo_aparicion = spawn_time_temp
                lista_return.append(ene_temp)
        coords_spawn_temp = list(coords_spawn)
        ronda += 1
    for i in range(abs(max_enemigos)):
        lista_return.pop(-1)

    return lista_return

class Jugador(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.hp = player_hp
        self.image = pygame.image.load('GIT/idle_abajo.png').convert_alpha()
        self.rect = self.image.get_rect()
        self.rect.center = (ANCHOPANTALLA // 2, ALTOPANTALLA // 2)
        self.velocidad_x = 0
        self.velocidad_y = 0

    def update(self):
        self.rect.x += self.velocidad_x
        self.rect.y += self.velocidad_y
        if self.rect.left < 64:
            self.rect.left = 64
        if self.rect.right > ANCHOPANTALLA - 64:
            self.rect.right = ANCHOPANTALLA - 64
        if self.rect.top < 40:
            self.rect.top = 40
        if self.rect.bottom > ALTOPANTALLA - 70:
            self.rect.bottom = ALTOPANTALLA - 70

#Clase enemigo   
class Enemigo(Jugador):
    def __init__(self, tipo, tiempo_aparicion=0):
        self.tiempo_update = pygame.time.get_ticks()
        super().__init__()
        self.vivo = True
        self.hp = tipo["hp"]
        self.dmg = tipo["dmg"]
        self.range = tipo["range"]
        self.atck_speed = tipo["atck_speed"]
        self.tiempo_aparicion = tiempo_aparicion
        self.imagen = pygame.image.load(tipo["png"]).convert_alpha()
        self.tipo = tipo["type"]

    #metodo follow con un objetivo que al ser singleplayer siempre sera el jugador
    def follow(self, objetivo):
        if self.hp <= 0:
            self.hp = 0
            self.vivo = False
        endx = 0
        endy = 0
        if self.rect.centerx > objetivo.rect.centerx:
            endx = -enemy_speed
        if self.rect.centerx < objetivo.rect.centerx:
            endx = enemy_speed
        if self.rect.centery > objetivo.rect.centery:
            endy = -enemy_speed
        if self.rect.centery < objetivo.rect.centery:
            endy = enemy_speed

        distancia = math.sqrt(((self.rect.centerx - objetivo.rect.centerx)**2)+((self.rect.centery - objetivo.rect.centery)**2))

        if self.tipo == "melee":
            if distancia < self.range and pygame.time.get_ticks() - self.tiempo_update >= self.atck_speed:
                objetivo.hp -= self.dmg
            else:
                self.move(endx, endy)

        if self.tipo == "range":
            if distancia < self.range + 50 and distancia > self.range - 50:
                if pygame.time.get_ticks() - self.tiempo_update >= self.atck_speed:
                    nuevo_disparo = Disparo(self, None, objetivo)
                    nuevo_disparo.rect.x = self.rect.x
                    nuevo_disparo.rect.y = self.rect.y
                    sprites.add(nuevo_disparo)
                    disparo_list_en.add(nuevo_disparo)
                    self.tiempo_update = pygame.time.get_ticks()
            elif distancia < self.range - 50:
                self.move(-endx, -endy)
            else:
                self.move(endx, endy)
        
        if self.rect.left < 64:
            self.rect.left = 64
        if self.rect.right > ANCHOPANTALLA - 64:
            self.rect.right = ANCHOPANTALLA - 64
        if self.rect.top < 40:
            self.rect.top = 40
        if self.rect.bottom > ALTOPANTALLA - 70:
            self.rect.bottom = ALTOPANTALLA - 70

    def spawn(self, lista_enemigos, objetivo):
        lista_enemigos.add(self)
        sprites.add(self)
        if self.vivo:
            self.follow(objetivo)
        else:
            if random.choice(probabilidades_drop):
                #INSERTAR AQUI UN OBJETO DE VIDA VIDA
                pass
            self.kill()

    def move(self, delta_x, delta_y):
        self.rect.x += delta_x
        self.rect.y += delta_y

#Clase disparo, el origen es para saber de donde sale
#direccion solo cuando hay jugador, y objetivo es none si es jugador tmb
class Disparo(pygame.sprite.Sprite):
    def __init__(self, origin = None, direccion=None, objetivo=None): 
        super().__init__()
        self.image = pygame.image.load('GIT/laser.png').convert_alpha()
        self.rect = self.image.get_rect()
        self.originx = origin.rect.x
        self.originy = origin.rect.y
        if objetivo != None:
            self.objetivox = objetivo.rect.x
            self.objetivoy = objetivo.rect.y
        else:
            if direccion == "up":
                self.objetivox = self.originx
                self.objetivoy = self.originy - 1
            if direccion == "down":
                self.objetivox = self.originx
                self.objetivoy = self.originy + 1
            if direccion == "left":
                self.objetivox = self.originx - 1
                self.objetivoy = self.originy
            if direccion == "right":
                self.objetivox = self.originx + 1
                self.objetivoy = self.originy
        
    def update(self, lista_enemigos):
        x1 = self.originx
        y1 = self.originy
        x2 = self.objetivox
        y2 = self.objetivoy
        deltx = x2-x1
        delty = y2-y1
        d = math.sqrt((deltx**2)+(delty**2))
        vx = deltx/(d/vel_disparo)
        vy = delty/(d/vel_disparo)
        self.rect.x += vx
        self.rect.y += vy
        if self.rect.x > ANCHOPANTALLA or self.rect.x < 0:
            self.kill()
        if self.rect.y > ALTOPANTALLA or self.rect.x < 0:
            self.kill()
        #esta parte es para ver colisiones
        for enemigo in lista_enemigos:
            if enemigo.rect.colliderect(self.rect):
                enemigo.hp -= daño_bala
                print(enemigo.hp)
                self.kill()
                break

pygame.init()

game_over = False
screen = pygame.display.set_mode((ANCHOPANTALLA, ALTOPANTALLA))
clock = pygame.time.Clock()

fondo = pygame.image.load("GIT/mapa.png")

sprites = pygame.sprite.Group()
disparo_list_en = pygame.sprite.Group()
disparo_list_player = pygame.sprite.Group()
enemigos_list = pygame.sprite.Group()

jugador = Jugador()
player_list = pygame.sprite.Group()
player_list.add(jugador)

nivel_1 = generar_nivel((3, 3), 10, nivel_1_coords, 4000)


sprites.add(jugador)

while not game_over:
    clock.tick(60)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            game_over = True

        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_a:
                jugador.velocidad_x = -player_speed
            
            elif event.key == pygame.K_d:
                jugador.velocidad_x = player_speed
            
            elif event.key == pygame.K_w:
                jugador.velocidad_y = -player_speed
            
            elif event.key == pygame.K_s:
                jugador.velocidad_y = player_speed
            
            elif event.key == pygame.K_SPACE:
                jugador.velocidad_y *= player_run_mult
                jugador.velocidad_x *= player_run_mult

            # Disparar
            if event.key == pygame.K_UP:
                nuevo_disparo = Disparo(jugador, "up")  # Crear una nueva instancia de Disparo
                nuevo_disparo.rect.x = jugador.rect.x + 25
                nuevo_disparo.rect.y = jugador.rect.y - 20
                sprites.add(nuevo_disparo)  # Agregar la nueva instancia al grupo de spritesa
                disparo_list_player.add(nuevo_disparo)
            if event.key == pygame.K_DOWN:
                nuevo_disparo = Disparo(jugador, "down")  # Crear una nueva instancia de Disparo
                nuevo_disparo.rect.x = jugador.rect.x + 25
                nuevo_disparo.rect.y = jugador.rect.y + 20
                sprites.add(nuevo_disparo)  # Agregar la nueva instancia al grupo de sprites
                disparo_list_player.add(nuevo_disparo)
            if event.key == pygame.K_RIGHT:
                nuevo_disparo = Disparo(jugador, "right")  # Crear una nueva instancia de Disparo
                nuevo_disparo.rect.x = jugador.rect.x + 40
                nuevo_disparo.rect.y = jugador.rect.y 
                sprites.add(nuevo_disparo)  # Agregar la nueva instancia al grupo de sprites
                disparo_list_player.add(nuevo_disparo)
            if event.key == pygame.K_LEFT:
                nuevo_disparo = Disparo(jugador, "left")  # Crear una nueva instancia de Disparo
                nuevo_disparo.rect.x = jugador.rect.x - 20
                nuevo_disparo.rect.y = jugador.rect.y 
                sprites.add(nuevo_disparo)  # Agregar la nueva instancia al grupo de sprites
                disparo_list_player.add(nuevo_disparo)

        if event.type == pygame.KEYUP:
            if event.key == pygame.K_a or event.key == pygame.K_d:
                jugador.velocidad_x = 0
            elif event.key == pygame.K_w or event.key == pygame.K_s:
                jugador.velocidad_y = 0

    # Actualizar posición del Jugador
    jugador.update()

    for ene in nivel_1:
        if pygame.time.get_ticks() >= ene.tiempo_aparicion:
            ene.spawn(enemigos_list, jugador)
    # Actualizar posición del disparo
    disparo_list_en.update(player_list)
    disparo_list_player.update(enemigos_list)
    # Dibujar fondo
    screen.blit(fondo, (0, 0))

    # Dibujar sprites
    sprites.draw(screen)
    # Actualizar pantalla
    pygame.display.flip()

#Al final me dio un poco de pereza explicar todo, si quieren saber como funciona lo demás preguntenme y explico xd
